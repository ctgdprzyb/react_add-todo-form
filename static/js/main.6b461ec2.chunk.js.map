{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","undefined","TodoList","todos","map","username","userId","highestId","Math","max","apply","todosFromServer","App","useState","newTaskTitle","setNewTaskTitle","newTaskUserId","setNewTaskUserId","titleError","setTitleError","userError","setUserError","usersFromServer","find","action","method","onSubmit","event","preventDefault","emptyTaskTitle","invalidUserId","push","htmlFor","type","placeholder","value","onChange","validatedTitle","target","replace","validateTitleField","defaultValue","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b461ec2.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface UserInfoProps {\n  user: User\n}\n\nexport const UserInfo = ({ user }: UserInfoProps) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface TodoInfoProps {\n  todo: Todo\n}\n\nexport const TodoInfo = ({ todo }: TodoInfoProps) => {\n  const {\n    id, title, user, completed,\n  } = todo;\n\n  return (\n    <article data-id={id} className={`TodoInfo ${completed && 'TodoInfo--completed'}`}>\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user ? <UserInfo user={user} /> : undefined}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface TodoListProps {\n  todos: Todo[]\n}\n\nexport const TodoList = ({ todos }: TodoListProps) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { ChangeEvent, FormEventHandler, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nlet highestId = Math.max.apply(null, todosFromServer.map(todo => todo.id));\n\nexport const App = () => {\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [newTaskUserId, setNewTaskUserId] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const todos: Todo[] = todosFromServer.map(todo => ({\n    ...todo,\n    user: getUser(todo.userId),\n  }));\n\n  const addNewTask: FormEventHandler = (event) => {\n    event.preventDefault();\n    const emptyTaskTitle = (newTaskTitle === '');\n    const invalidUserId = (newTaskUserId === 0);\n\n    setTitleError(emptyTaskTitle);\n    setUserError(invalidUserId);\n\n    if (!emptyTaskTitle && !invalidUserId) {\n      highestId += 1;\n      todosFromServer.push({\n        title: newTaskTitle,\n        completed: false,\n        userId: newTaskUserId,\n        id: highestId,\n      });\n      setNewTaskTitle('');\n      setNewTaskUserId(0);\n    }\n  };\n\n  const validateTitleField = (event: ChangeEvent<HTMLInputElement>) => {\n    const validatedTitle\n    = (event.target.value).replace(/([^a-z0-9а-я\\s])/gi, '');\n\n    setNewTaskTitle(validatedTitle);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addNewTask}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            name=\"titleInput\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={newTaskTitle}\n            onChange={(event) => {\n              setTitleError(false);\n              validateTitleField(event);\n            }}\n          />\n\n          {titleError\n            ? <span className=\"error\">Please enter a title</span>\n            : undefined}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            name=\"userSelect\"\n            data-cy=\"userSelect\"\n            defaultValue={0}\n            value={newTaskUserId}\n            onChange={(event) => {\n              setUserError(false);\n              setNewTaskUserId(Number(event.target.value));\n            }}\n          >\n            <option value={0} disabled>Choose a user</option>\n            {usersFromServer.map((user: User) => {\n              return (\n                <option value={user.id}>{user.name}</option>\n              );\n            })}\n          </select>\n\n          {userError\n            ? <span className=\"error\">Please choose a user</span>\n            : undefined}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}